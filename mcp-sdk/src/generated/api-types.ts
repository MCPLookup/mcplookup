/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/servers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search and discover MCP servers
         * @description Discover MCP servers with intelligent filtering and ranking.
         *     Supports search by keywords, categories, and quality metrics.
         *
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Search query
                     * @example file operations
                     */
                    q?: string;
                    /** @description Filter by category */
                    category?: "development" | "data" | "communication" | "api-integration" | "utility" | "other";
                    /** @description Minimum quality level */
                    quality?: "high" | "medium" | "low";
                    /** @description Filter by installation method */
                    installation_method?: "npm" | "python" | "docker" | "git" | "live_service";
                    /** @description Only servers with Claude Desktop configs */
                    claude_ready?: boolean;
                    /** @description Number of results to return */
                    limit?: number;
                    /** @description Pagination offset */
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Server search results */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            servers?: components["schemas"]["MCPServer"][];
                            /** @description Total number of matching servers */
                            total?: number;
                            pagination?: {
                                limit?: number;
                                offset?: number;
                                has_more?: boolean;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{serverId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get detailed server information
         * @description Get complete information about a specific MCP server
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Server identifier
                     * @example github.com/baidu-maps/mcp
                     */
                    serverId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Server details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MCPServer"];
                    };
                };
                /** @description Server not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{serverId}/install": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get installation instructions
         * @description Get detailed installation instructions for a server
         */
        get: {
            parameters: {
                query?: {
                    /** @description Preferred installation method */
                    method?: "npm" | "python" | "docker" | "git" | "live_service";
                    /** @description Target platform */
                    platform?: "linux" | "darwin" | "win32";
                };
                header?: never;
                path: {
                    /** @description Server identifier */
                    serverId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Installation instructions */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            recommended_method?: string;
                            installation_steps?: {
                                step?: string;
                                command?: string;
                                description?: string;
                            }[];
                            claude_config?: components["schemas"]["ClaudeIntegration"];
                            environment_setup?: components["schemas"]["EnvironmentVariable"][];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/discover/smart": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * AI-powered smart discovery
         * @description Use AI to understand natural language queries and find the best matching servers.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @description Natural language query
                         * @example I need to work with files and folders in my project
                         */
                        query?: string;
                        /**
                         * @description Additional context about the use case
                         * @example Building a Node.js application
                         */
                        context?: string;
                        /**
                         * @description Maximum number of results
                         * @default 10
                         */
                        max_results?: number;
                    };
                };
            };
            responses: {
                /** @description Smart discovery results */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            matches?: {
                                server?: components["schemas"]["MCPServer"];
                                /** @description How well this server matches the query (0-1) */
                                relevance_score?: number;
                                /** @description Why this server was recommended */
                                match_reasons?: string[];
                            }[];
                            query_analysis?: {
                                extracted_keywords?: string[];
                                suggested_categories?: string[];
                                intent?: string;
                            };
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Complete MCP server record - USE THIS EVERYWHERE (replaces MCPServerRecord, GitHubRepoAnalysis, etc.) */
        MCPServer: {
            /**
             * @description Unique server identifier
             * @example github.com/baidu-maps/mcp
             */
            id: string;
            /**
             * @description Domain (same as id for compatibility)
             * @example github.com/baidu-maps/mcp
             */
            domain: string;
            /**
             * @description Server name
             * @example Baidu Maps MCP
             */
            name: string;
            /**
             * @description Human-readable description
             * @example 百度地图MCP Server for location services
             */
            description: string;
            /**
             * Format: uri
             * @description Optional live endpoint URL
             * @example https://api.baidu-maps.com/mcp
             */
            endpoint?: string;
            repository?: components["schemas"]["GitHubRepository"];
            /** @description Downloaded key files (README, package.json, etc.) */
            files?: components["schemas"]["FileContent"][];
            /** @description AI-computed analysis and classification */
            computed?: components["schemas"]["ComputedMetrics"];
            /** @description Parser metadata and version info */
            parsingMetadata?: components["schemas"]["ParsingMetadata"];
            /** @description Complete installation methods from parser */
            installationMethods?: components["schemas"]["InstallationMethod"][];
            /** @description All available packages across registries */
            packages?: components["schemas"]["PackageInfo"][];
            /**
             * @description Primary category for filtering
             * @enum {string}
             */
            category: "development" | "data" | "communication" | "api-integration" | "utility" | "other";
            /**
             * @description Technology/language tags
             * @example [
             *       "python",
             *       "maps",
             *       "geolocation"
             *     ]
             */
            subcategories?: string[];
            /**
             * @description Searchable keywords
             * @example [
             *       "maps",
             *       "baidu",
             *       "location",
             *       "gps"
             *     ]
             */
            tags?: string[];
            /**
             * @description What problems this server solves
             * @example [
             *       "Find locations",
             *       "Get directions",
             *       "Location search"
             *     ]
             */
            use_cases?: string[];
            capabilities?: components["schemas"]["ServerCapabilities"];
            quality: components["schemas"]["QualityMetrics"];
            popularity?: components["schemas"]["PopularityMetrics"];
            /** @description Trust score (0-100) */
            trust_score: number;
            /**
             * @description Verification status
             * @enum {string}
             */
            verification_status: "verified" | "unverified" | "pending" | "rejected";
            availability: components["schemas"]["AvailabilityInfo"];
            /**
             * Format: date-time
             * @description First discovered/registered
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Last updated
             */
            updated_at: string;
            /** @description Repository maintainer info */
            maintainer?: {
                name?: string;
                /** Format: uri */
                url?: string;
            };
        };
        /** @description Direct output from mcp-github-parser - use as-is */
        GitHubRepoWithInstallation: {
            repository: components["schemas"]["GitHubRepository"];
            files?: components["schemas"]["FileContent"][];
            installationMethods: components["schemas"]["InstallationMethod"][];
            parsingMetadata: components["schemas"]["ParsingMetadata"];
            computed?: components["schemas"]["ComputedMetrics"];
        };
        /** @description Storage format for complete server data */
        StoredServerData: {
            server: components["schemas"]["MCPServer"];
            metadata: {
                /** Format: date-time */
                discoveredAt: string;
                /** Format: date-time */
                lastAnalyzed: string;
                sourceQuery?: string;
                /** @enum {string} */
                registrationSource: "github_auto" | "manual" | "api";
            };
            original?: {
                githubRepo?: components["schemas"]["GitHubRepoWithInstallation"];
                parserVersion?: string;
            };
        };
        /** @description Complete GitHub repository information */
        GitHubRepository: {
            /** @description GitHub repository ID */
            id: number;
            /**
             * @description Full repository name (owner/repo)
             * @example baidu-maps/mcp
             */
            fullName: string;
            /**
             * @description Repository name
             * @example mcp
             */
            name: string;
            /** @description Repository description */
            description?: string;
            /**
             * Format: uri
             * @description Repository URL
             */
            htmlUrl: string;
            /**
             * Format: uri
             * @description Clone URL
             */
            cloneUrl: string;
            /** @description Star count */
            stars: number;
            /** @description Fork count */
            forks: number;
            /** @description Primary language */
            language?: string;
            /** @description Repository topics */
            topics?: string[];
            license?: {
                name?: string;
                spdxId?: string;
            };
            owner?: {
                login?: string;
                type?: string;
            };
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            pushedAt?: string;
        };
        /** @description Downloaded file content */
        FileContent: {
            /** @description File path */
            path: string;
            /** @description File content */
            content: string;
            /** @description File encoding */
            encoding?: string;
        };
        /** @description AI-computed analysis and classification */
        ComputedMetrics: {
            /** @description Whether this is identified as an MCP server */
            isMcpServer?: boolean;
            /** @description MCP server classification */
            mcpClassification?: string;
            /** @description Confidence score (0-1) */
            mcpConfidence?: number;
            /** @description AI reasoning for classification */
            mcpReasoning?: string;
            /**
             * @description Installation complexity
             * @enum {string}
             */
            complexity?: "simple" | "moderate" | "complex";
            /**
             * @description Installation difficulty
             * @enum {string}
             */
            installationDifficulty?: "easy" | "medium" | "hard";
            /**
             * @description Project maturity
             * @enum {string}
             */
            maturityLevel?: "experimental" | "beta" | "stable" | "mature";
            /** @description Supported platforms */
            supportedPlatforms?: string[];
            /** @description Detected MCP tools */
            mcpTools?: string[];
            /** @description Detected MCP resources */
            mcpResources?: string[];
            /** @description Detected MCP prompts */
            mcpPrompts?: string[];
            /** @description Whether it requires Claude Desktop */
            requiresClaudeDesktop?: boolean;
            /** @description Whether it requires environment variables */
            requiresEnvironmentVars?: boolean;
            /** @description Whether it has documentation */
            hasDocumentation?: boolean;
            /** @description Whether it has examples */
            hasExamples?: boolean;
        };
        /** @description Parser metadata and version info */
        ParsingMetadata: {
            /** @description Parser version used */
            parserVersion: string;
            /**
             * Format: date-time
             * @description When analysis was performed
             */
            analyzedAt: string;
            /** @description Processing time in milliseconds */
            processingTime?: number;
            /** @description Overall confidence score */
            confidence?: number;
        };
        QualityMetrics: {
            /**
             * @description Overall quality score
             * @example 120
             */
            score?: number;
            /**
             * @description Quality tier
             * @enum {string}
             */
            category?: "high" | "medium" | "low";
            /**
             * @description Trust rating
             * @example 50
             */
            trust_score?: number;
            /** @description Official verification status */
            verified?: boolean;
            /** @description Known quality issues */
            issues?: string[];
            /**
             * @description Quality indicators
             * @example [
             *       "Claude Desktop configuration",
             *       "Python pip installation"
             *     ]
             */
            evidence?: string[];
        };
        PopularityMetrics: {
            /**
             * @description GitHub stars
             * @example 273
             */
            stars?: number;
            /**
             * @description GitHub forks
             * @example 31
             */
            forks?: number;
            /** @description Package downloads (if available) */
            downloads?: number;
            /** @description User rating (future) */
            rating?: number;
            /**
             * Format: date-time
             * @description Last activity timestamp
             */
            last_updated?: string;
        };
        InstallationInfo: {
            /**
             * @description Recommended installation approach
             * @example python
             * @enum {string}
             */
            recommended_method?: "npm" | "python" | "docker" | "git" | "live_service";
            /**
             * @description Setup complexity
             * @example easy
             * @enum {string}
             */
            difficulty?: "easy" | "medium" | "advanced";
            /** @description All available installation options */
            methods?: components["schemas"]["InstallationMethod"][];
        };
        InstallationMethod: {
            /** @enum {string} */
            type: "installation" | "configuration" | "claude_desktop" | "vscode" | "deployment" | "testing";
            title: string;
            description: string;
            /** @enum {string} */
            category: "setup" | "build" | "deploy" | "configure" | "test" | "run";
            /** @enum {string} */
            subtype?: "pip" | "conda" | "poetry" | "pipenv" | "setup_py" | "pyproject_toml" | "requirements_txt" | "venv" | "virtualenv" | "npm" | "yarn" | "pnpm" | "npm_global" | "npx" | "package_json" | "go_get" | "go_install" | "go_mod" | "go_build" | "go_run" | "go_mod_tidy" | "cargo_install" | "cargo_build" | "cargo_run" | "cargo_test" | "cargo_features" | "docker_build" | "docker_run" | "docker_compose" | "dockerfile" | "docker_pull" | "brew" | "apt" | "yum" | "dnf" | "chocolatey" | "winget" | "snap" | "flatpak" | "make" | "cmake" | "gradle" | "maven" | "bazel" | "ninja" | "git+uv" | "git_clone" | "git_submodule" | "git_pull" | "package_manager" | "environment_vars" | "json_config" | "yaml_config" | "ini_config" | "toml_config" | "manual_config" | "docker_config" | "mcp_json" | "settings_json" | "workspace_config" | "server_start" | "service_start" | "background_process" | "curl_test" | "inspector_test" | "unit_test" | "integration_test";
            commands?: string[];
            /** @enum {string} */
            platform?: "python" | "javascript" | "typescript" | "go" | "rust" | "java" | "csharp" | "cpp" | "php" | "ruby" | "nodejs" | "deno" | "bun" | "docker" | "kubernetes" | "podman" | "linux" | "macos" | "windows" | "cross_platform" | "claude_desktop" | "vscode" | "mcp_client" | "system_service" | "cloud" | "serverless" | "web_server";
            config_content?: string;
            config_file_path?: string;
            variables?: {
                [key: string]: string;
            };
            mcp_config?: {
                server_name?: string;
                command?: string;
                args?: string[];
                env?: {
                    [key: string]: string;
                };
            };
            environment_vars?: {
                [key: string]: string;
            };
            ports?: number[];
            endpoints?: {
                url: string;
                transport: string;
                description: string;
            }[];
            /** @enum {string} */
            transport?: "stdio" | "sse" | "websocket" | "tcp" | "http";
            test_commands?: string[];
            expected_output?: string;
            test_url?: string;
            requirements?: string[];
            dependencies?: {
                [key: string]: string;
            };
        };
        EnvironmentConfig: {
            /** @description Required and optional environment variables */
            variables?: components["schemas"]["EnvironmentVariable"][];
            runtime_requirements?: {
                /** @example >=18.0.0 */
                node_version?: string;
                /** @example >=3.8 */
                python_version?: string;
                /** @example [
                 *       "linux",
                 *       "darwin",
                 *       "win32"
                 *     ] */
                platforms?: string[];
            };
        };
        EnvironmentVariable: {
            /**
             * @description Variable name
             * @example BAIDU_MAPS_API_KEY
             */
            name?: string;
            /** @description Whether this variable is required */
            required?: boolean;
            /** @description What this variable does */
            description?: string;
            /** @description Default value (if any) */
            default?: string;
            /** @description Example value */
            example?: string;
            /** @description Validation pattern or rules */
            validation?: string;
        };
        ClaudeIntegration: {
            /** @description Has ready-to-use Claude config */
            available?: boolean;
            /**
             * @description Complete mcpServers configuration
             * @example {
             *       "mcpServers": {
             *         "baidu-maps": {
             *           "command": "uvx",
             *           "args": [
             *             "mcp-server-baidu-maps"
             *           ],
             *           "env": {
             *             "BAIDU_MAPS_API_KEY": "your-api-key"
             *           }
             *         }
             *       }
             *     }
             */
            config?: Record<string, never>;
            /**
             * @description Name used in Claude Desktop
             * @example baidu-maps
             */
            server_name?: string;
            /**
             * @description Execution command
             * @example uvx
             */
            command?: string;
            /**
             * @description Command arguments
             * @example [
             *       "mcp-server-baidu-maps"
             *     ]
             */
            args?: string[];
            /** @description Environment variables for Claude config */
            env_vars?: {
                [key: string]: string;
            };
        };
        DocumentationInfo: {
            /** @description Full README content */
            readme_content?: string;
            /** @description Step-by-step setup guide */
            setup_instructions?: string[];
            /** @description Usage examples and code snippets */
            examples?: components["schemas"]["CodeExample"][];
            /** @description Special installation requirements or warnings */
            installation_notes?: string;
            /** @description Common issues and solutions */
            troubleshooting?: string[];
        };
        CodeExample: {
            /**
             * @description Example type
             * @enum {string}
             */
            type?: "code_block" | "configuration" | "usage" | "claude_prompt";
            /**
             * @description Programming language
             * @example json
             */
            language?: string;
            /** @description Example title */
            title?: string;
            /** @description Example code or content */
            content?: string;
            /** @description What this example demonstrates */
            description?: string;
        };
        ServerCapabilities: {
            /**
             * @description Available MCP tool names
             * @example [
             *       "search_location",
             *       "get_directions",
             *       "nearby_places"
             *     ]
             */
            tools?: string[];
            /** @description Available MCP resources */
            resources?: string[];
            /** @description Available MCP prompts */
            prompts?: string[];
            /**
             * @description Supported MCP protocol version
             * @example 2024-11-05
             */
            protocol_version?: string;
            /**
             * @description High-level feature descriptions
             * @example [
             *       "File operations",
             *       "API calls",
             *       "Data analysis"
             *     ]
             */
            features?: string[];
        };
        AvailabilityInfo: {
            /**
             * @description Service availability type
             * @example package_only
             * @enum {string}
             */
            status?: "package_only" | "live_service" | "both";
            /** @description Live endpoint tested and working */
            endpoint_verified?: boolean;
            /**
             * Format: uri
             * @description Live service URL (if available)
             */
            live_endpoint?: string;
            /**
             * @description Preferred package registry
             * @example github
             */
            primary_package?: string;
            /** @description Has installable packages */
            packages_available?: boolean;
        };
        APIConfiguration: {
            /**
             * @description Primary transport protocol
             * @example stdio
             * @enum {string}
             */
            transport?: "stdio" | "http" | "websocket" | "sse";
            /** @description API endpoint URLs (documentation/reference) */
            endpoints?: string[];
            /** @description CORS support for web usage */
            cors_enabled?: boolean;
            auth?: components["schemas"]["AuthConfiguration"];
        };
        AuthConfiguration: {
            /**
             * @description Authentication method
             * @example none
             * @enum {string}
             */
            type?: "none" | "api_key" | "oauth2" | "basic" | "custom";
            /**
             * @description Authentication details
             * @example No authentication required
             */
            description?: string;
            /** @description Required OAuth scopes (if applicable) */
            required_scopes?: string[];
        };
        SourceInfo: {
            /**
             * @description Primary source registry
             * @enum {string}
             */
            type?: "github" | "npm" | "pypi" | "docker" | "other";
            /**
             * Format: uri
             * @description Source repository URL
             */
            url?: string;
            /**
             * @description Primary programming language
             * @example Python
             */
            language?: string;
            /**
             * @description Software license
             * @example MIT License
             */
            license?: string;
            /**
             * Format: date-time
             * @description Last source update
             */
            last_updated?: string;
            /** @description Repository topics/tags */
            topics?: string[];
        };
        PackageInfo: {
            /**
             * @description Package registry
             * @enum {string}
             */
            registry_name?: "npm" | "pypi" | "docker" | "github" | "other";
            /** @description Package name */
            name?: string;
            /** @description Package version */
            version?: string;
            /** @description How to install this package */
            installation_command?: string;
            /** @description Additional setup notes */
            setup_instructions?: string;
            /** @description Download statistics (if available) */
            download_count?: number;
        };
        VerificationStatus: {
            /**
             * @description Verification status
             * @enum {string}
             */
            status?: "verified" | "unverified" | "pending" | "rejected";
            /**
             * Format: date-time
             * @description Last data enhancement timestamp
             */
            enhanced_at?: string;
            /** @description Original source identifier */
            source_id?: string;
            /** @description How verification was performed */
            verification_method?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
